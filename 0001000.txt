
EveryDay
0.0
C语言学习经验，包括各个语言的学习经验；
0.0.1先看懂基本语法；不求甚解；尽量理解；
0.0.2找实际的例子来锻炼（如贪吃蛇小游戏）；理解基本语法中不理解的部分；
如贪吃蛇游戏C语言游戏代码说明；
https://blog.csdn.net/yc1515707718/article/details/80461396
如：语言十大经典实例
https://wenku.baidu.com/view/d7143159804d2b160b4ec046.html
0.0.3看懂本语言的库文件；

1.1.1
C：象棋问题，微软工程师提出的ChineseChess，解法：i<=81; i--;i/9%3 == i%9%3，i/9与i%9这是用一个变量覆盖所有的结点，用%3表示当将帅的结点位置相差3，或者相等就要排除；数学问题
1.1.2
C多维指针的理解；
#include<stdio.h>
int main(void)
{
	int i = 10;
	int* p = &i;
	int** q = &p;
	int*** r = &q;
//*有两个作用：1.1.声明指针变量，int***表示r的基本类型；从这个定义上，int和int*都是一种类型的声明作用；
//1.2.*表示取值，当我们取r的值时，就是q的地址值&q；
//*r是q的地址值，***r表示的是p指向的地址所保存的值，也就是i；
	printf("p = %p,the value of i = %d\n",p,*p);//int是整型，输出控制符%d;
	printf("q = %p,the value of p = %p\n",q,*q);//int*是指针类型，输出控制符%；
	printf("r = %p,the value of q = %p\n",&q,*r);

	return 0;
}
//***r=**q=*p=i
1.1.3
结构体指针作为函数参数: 结构体变量名代表的是整个集合本身，作为函数参数时传递的整个集合，也就是所有成员，而不是像数组一样被编译器转换成一个指针。如果结构体成员较多，尤其是成员为数组时，传送的时间和空间开销会很大，影响程序的运行效率。所以最好的办法就是使用结构体指针，这时由实参传向形参的只是一个地址，非常快速。
1.1.4用不同语言实现同一算法，比较差别；
HanoiTower汉诺塔原理，可以用二叉树来理解；算法；
1.1.5字符数组后面要'\0'，否则会打印出乱码；
1.1.6
C指针，可直接给内存的某变量赋值，*((int*)ox22FF4C) = 100;这可能是C语言的安全漏洞；
Int I; int *pI; char *pC; float *pF; pI = &I; 

1.1.7
为何在VisualStudio中，关于window64位的系统运行，这个文件夹要加空格；
D:\Program Files (x86)---Files与(x8)中间要加一个空格；（本身有一个空格）
System(”\ "D:\\Program Files (x86)\\Tencent\\WeChat\\WeChat.exe\"”)
//为何本来右击属性时有空格，复制过来就没有空格Files (x86)
1.1.8
#define _CRT_SECURE_NO_WARNINGS //移除安全函数，入侵服务器；
1.1.9
计算机在二进制位序列的方式存放的，最小存储单位是位bit；
通过对内存进行组织，可以引用特定的位集合，把计算机的内存起始位编号为1，每隔8位编号增1，也就是以字节为单位，每个一个字节编号向上加一；
Win32位系统最大内存地址编号2^32，=2^2*2^10*2^10*2^10=4Gb能存4Gb编号的数据；由于一个编号对应8位，即1字节；就是最大能存4GB的数据；
64位系统2^64=2^
1.1.10
这个系统的位数有什么定的？内存的大小不是根据内存卡的物理容量确定的吗？
计算机CPU的地址总线数目决定了CPU的寻址范围，这种由地址总线对应的地址称为物理地址；一般情况下32位的CPU的地址总线是32位，64的地址总线是36位或者40位（注意：平时所说的32位CPU和64位CPU指的是CPU一次能够处理的数据宽度，即位宽，而不是地址总线数目，64位的CPU一次能处64位的数据，但其地址总线数不是64），按照前述64位CPU能够寻址范围2^36位或者2^40位地址编号，也就是64Gb或者1Tb，对应的物理地址为64GB或者1TB，也就是说最大支持内存为这些；
1.1.11
CPU与芯片的区别：芯片是集成电路的俗称，CPU是中央处理器，包含运算器和控制器，是数字电路；CPU是一种数字芯片，只是芯片的一类；
1.1.12 #if #endif的用法：
#if 指令与 #elif、#else 和 #endif 指令一起控制源文件部分的编译。 如果您编写的表达式（在 #if 后）有一个非零值，则在翻译单元中保留紧跟 #if 指令的行组。
源文件中的每个 #if 指令必须与表示结束的 #endif 指令匹配。 任意数量的 #elif 指令可以出现在 #if 和 #endif 指令之间，但最多允许一个 #else 指令。 #else 指令（如果有）必须是 #endif 之前的最后一个指令。
#if、#elif、#else 和 #endif 指令可以嵌套在其他 #if 指令的文本部分中。 每个嵌套的 #else、#elif 或 #endif 指令属于最靠近的前面的 #if 指令。
